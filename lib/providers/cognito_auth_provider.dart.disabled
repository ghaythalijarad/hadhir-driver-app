import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/foundation.dart';
import '../services/aws_cognito_service.dart';

// Authentication state model
class CognitoAuthState {
  final bool isLoading;
  final bool isAuthenticated;
  final String? userId;
  final String? email;
  final String? phoneNumber;
  final String? fullName;
  final String? accessToken;
  final String? errorMessage;
  final bool requiresEmailVerification;
  final bool requiresSMSVerification;
  final bool emailVerified;
  final bool phoneVerified;

  const CognitoAuthState({
    this.isLoading = false,
    this.isAuthenticated = false,
    this.userId,
    this.email,
    this.phoneNumber,
    this.fullName,
    this.accessToken,
    this.errorMessage,
    this.requiresEmailVerification = false,
    this.requiresSMSVerification = false,
    this.emailVerified = false,
    this.phoneVerified = false,
  });

  CognitoAuthState copyWith({
    bool? isLoading,
    bool? isAuthenticated,
    String? userId,
    String? email,
    String? phoneNumber,
    String? fullName,
    String? accessToken,
    String? errorMessage,
    bool? requiresEmailVerification,
    bool? requiresSMSVerification,
    bool? emailVerified,
    bool? phoneVerified,
  }) {
    return CognitoAuthState(
      isLoading: isLoading ?? this.isLoading,
      isAuthenticated: isAuthenticated ?? this.isAuthenticated,
      userId: userId ?? this.userId,
      email: email ?? this.email,
      phoneNumber: phoneNumber ?? this.phoneNumber,
      fullName: fullName ?? this.fullName,
      accessToken: accessToken ?? this.accessToken,
      errorMessage: errorMessage ?? this.errorMessage,
      requiresEmailVerification: requiresEmailVerification ?? this.requiresEmailVerification,
      requiresSMSVerification: requiresSMSVerification ?? this.requiresSMSVerification,
      emailVerified: emailVerified ?? this.emailVerified,
      phoneVerified: phoneVerified ?? this.phoneVerified,
    );
  }
}

// Enhanced Cognito authentication provider using Riverpod
class CognitoAuthNotifier extends StateNotifier<CognitoAuthState> {
  final AWSCognitoService _cognitoService;

  CognitoAuthNotifier(this._cognitoService) : super(const CognitoAuthState()) {
    _initializeAuth();
  }

  Future<void> _initializeAuth() async {
    try {
      await _cognitoService.initialize();
      await _checkAuthenticationStatus();
    } catch (e) {
      debugPrint('❌ Auth initialization error: $e');
      state = state.copyWith(
        errorMessage: 'فشل في تهيئة النظام: ${e.toString()}',
      );
    }
  }

  Future<void> _checkAuthenticationStatus() async {
    try {
      final isSignedIn = await _cognitoService.isSignedIn();
      if (isSignedIn) {
        final user = await _cognitoService.getCurrentUser();
        if (user != null) {
          await _loadUserProfile();
        }
      }
    } catch (e) {
      debugPrint('❌ Error checking auth status: $e');
    }
  }

  Future<void> _loadUserProfile() async {
    try {
      // Load user attributes and profile data
      final user = await _cognitoService.getCurrentUser();
      if (user != null) {
        state = state.copyWith(
          isAuthenticated: true,
          userId: user.userId,
          // Additional profile loading logic here
        );
      }
    } catch (e) {
      debugPrint('❌ Error loading user profile: $e');
    }
  }

  /// Register a new driver with email and SMS verification
  Future<bool> registerDriver({
    required String email,
    required String password,
    required String phoneNumber,
    required String fullName,
    String? city,
    String? vehicleType,
    String? licenseNumber,
    String? nationalId,
  }) async {
    debugPrint('📝 Registering new driver: $email');
    
    state = state.copyWith(isLoading: true, errorMessage: null);

    try {
      final result = await _cognitoService.signUpDriver(
        email: email,
        password: password,
        phoneNumber: phoneNumber,
        fullName: fullName,
        city: city,
        vehicleType: vehicleType,
        licenseNumber: licenseNumber,
        nationalId: nationalId,
      );

      if (result.success) {
        state = state.copyWith(
          isLoading: false,
          userId: result.userId,
          email: email,
          phoneNumber: phoneNumber,
          fullName: fullName,
          requiresEmailVerification: result.requiresVerification,
          requiresSMSVerification: result.requiresVerification,
        );
        debugPrint('✅ Driver registration successful');
        return true;
      } else {
        state = state.copyWith(
          isLoading: false,
          errorMessage: result.message,
        );
        debugPrint('❌ Driver registration failed: ${result.message}');
        return false;
      }
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        errorMessage: 'خطأ في التسجيل: ${e.toString()}',
      );
      debugPrint('❌ Registration error: $e');
      return false;
    }
  }

  /// Sign in with email/phone and password
  Future<bool> signIn({
    required String username,
    required String password,
  }) async {
    debugPrint('🔐 Signing in: $username');
    
    state = state.copyWith(isLoading: true, errorMessage: null);

    try {
      final result = await _cognitoService.signIn(
        username: username,
        password: password,
      );

      if (result.success) {
        await _loadUserProfile();
        state = state.copyWith(
          isLoading: false,
          isAuthenticated: true,
          accessToken: result.token,
        );
        debugPrint('✅ Sign in successful');
        return true;
      } else {
        state = state.copyWith(
          isLoading: false,
          errorMessage: result.message,
          requiresEmailVerification: result.requiresVerification,
        );
        debugPrint('❌ Sign in failed: ${result.message}');
        return false;
      }
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        errorMessage: 'خطأ في تسجيل الدخول: ${e.toString()}',
      );
      debugPrint('❌ Sign in error: $e');
      return false;
    }
  }

  /// Verify email with confirmation code
  Future<bool> verifyEmail({
    required String username,
    required String confirmationCode,
  }) async {
    debugPrint('📧 Verifying email: $username');
    
    state = state.copyWith(isLoading: true, errorMessage: null);

    try {
      final result = await _cognitoService.verifyEmail(
        username: username,
        confirmationCode: confirmationCode,
      );

      if (result.success) {
        state = state.copyWith(
          isLoading: false,
          emailVerified: true,
          requiresEmailVerification: false,
        );
        debugPrint('✅ Email verification successful');
        return true;
      } else {
        state = state.copyWith(
          isLoading: false,
          errorMessage: result.message,
        );
        debugPrint('❌ Email verification failed: ${result.message}');
        return false;
      }
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        errorMessage: 'خطأ في التحقق من البريد الإلكتروني: ${e.toString()}',
      );
      debugPrint('❌ Email verification error: $e');
      return false;
    }
  }

  /// Send SMS verification code
  Future<bool> sendSMSVerification({
    required String phoneNumber,
  }) async {
    debugPrint('📱 Sending SMS verification: $phoneNumber');
    
    state = state.copyWith(isLoading: true, errorMessage: null);

    try {
      final result = await _cognitoService.sendSMSVerification(
        phoneNumber: phoneNumber,
      );

      if (result.success) {
        state = state.copyWith(
          isLoading: false,
          requiresSMSVerification: true,
        );
        debugPrint('✅ SMS verification sent');
        return true;
      } else {
        state = state.copyWith(
          isLoading: false,
          errorMessage: result.message,
        );
        debugPrint('❌ SMS verification failed: ${result.message}');
        return false;
      }
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        errorMessage: 'خطأ في إرسال رمز التحقق: ${e.toString()}',
      );
      debugPrint('❌ SMS verification error: $e');
      return false;
    }
  }

  /// Verify SMS with confirmation code
  Future<bool> verifySMS({
    required String confirmationCode,
  }) async {
    debugPrint('📱 Verifying SMS code');
    
    state = state.copyWith(isLoading: true, errorMessage: null);

    try {
      final result = await _cognitoService.verifySMS(
        confirmationCode: confirmationCode,
      );

      if (result.success) {
        state = state.copyWith(
          isLoading: false,
          phoneVerified: true,
          requiresSMSVerification: false,
        );
        debugPrint('✅ SMS verification successful');
        return true;
      } else {
        state = state.copyWith(
          isLoading: false,
          errorMessage: result.message,
        );
        debugPrint('❌ SMS verification failed: ${result.message}');
        return false;
      }
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        errorMessage: 'خطأ في التحقق من الرسالة: ${e.toString()}',
      );
      debugPrint('❌ SMS verification error: $e');
      return false;
    }
  }

  /// Resend confirmation code
  Future<bool> resendConfirmationCode({
    required String username,
    VerificationType type = VerificationType.email,
  }) async {
    debugPrint('🔄 Resending confirmation code: $type');
    
    state = state.copyWith(isLoading: true, errorMessage: null);

    try {
      final result = await _cognitoService.resendConfirmationCode(
        username: username,
        type: type,
      );

      if (result.success) {
        state = state.copyWith(isLoading: false);
        debugPrint('✅ Confirmation code resent');
        return true;
      } else {
        state = state.copyWith(
          isLoading: false,
          errorMessage: result.message,
        );
        debugPrint('❌ Resend failed: ${result.message}');
        return false;
      }
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        errorMessage: 'خطأ في إعادة الإرسال: ${e.toString()}',
      );
      debugPrint('❌ Resend error: $e');
      return false;
    }
  }

  /// Reset password
  Future<bool> resetPassword({
    required String username,
  }) async {
    debugPrint('🔑 Initiating password reset: $username');
    
    state = state.copyWith(isLoading: true, errorMessage: null);

    try {
      final result = await _cognitoService.resetPassword(username: username);

      if (result.success) {
        state = state.copyWith(isLoading: false);
        debugPrint('✅ Password reset initiated');
        return true;
      } else {
        state = state.copyWith(
          isLoading: false,
          errorMessage: result.message,
        );
        debugPrint('❌ Password reset failed: ${result.message}');
        return false;
      }
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        errorMessage: 'خطأ في إعادة تعيين كلمة المرور: ${e.toString()}',
      );
      debugPrint('❌ Password reset error: $e');
      return false;
    }
  }

  /// Confirm password reset
  Future<bool> confirmPasswordReset({
    required String username,
    required String newPassword,
    required String confirmationCode,
  }) async {
    debugPrint('🔑 Confirming password reset: $username');
    
    state = state.copyWith(isLoading: true, errorMessage: null);

    try {
      final result = await _cognitoService.confirmPasswordReset(
        username: username,
        newPassword: newPassword,
        confirmationCode: confirmationCode,
      );

      if (result.success) {
        state = state.copyWith(isLoading: false);
        debugPrint('✅ Password reset confirmed');
        return true;
      } else {
        state = state.copyWith(
          isLoading: false,
          errorMessage: result.message,
        );
        debugPrint('❌ Password reset confirmation failed: ${result.message}');
        return false;
      }
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        errorMessage: 'خطأ في تأكيد كلمة المرور: ${e.toString()}',
      );
      debugPrint('❌ Password reset confirmation error: $e');
      return false;
    }
  }

  /// Sign out
  Future<void> signOut() async {
    debugPrint('🚪 Signing out');
    
    try {
      await _cognitoService.signOut();
      state = const CognitoAuthState();
      debugPrint('✅ Sign out successful');
    } catch (e) {
      debugPrint('❌ Sign out error: $e');
      state = state.copyWith(
        errorMessage: 'خطأ في تسجيل الخروج: ${e.toString()}',
      );
    }
  }

  /// Clear error message
  void clearError() {
    state = state.copyWith(errorMessage: null);
  }

  /// Confirm sign up with email verification code
  Future<void> confirmSignUp(String email, String code) async {
    debugPrint('✉️ Confirming sign up for email: $email');
    state = state.copyWith(isLoading: true, errorMessage: null);

    try {
      await _cognitoService.confirmSignUp(email, code);
      state = state.copyWith(
        isLoading: false,
        emailVerified: true,
      );
      debugPrint('✅ Email verification successful');
    } catch (e) {
      debugPrint('❌ Email verification error: $e');
      state = state.copyWith(
        isLoading: false,
        errorMessage: 'خطأ في التحقق من البريد الإلكتروني: ${e.toString()}',
      );
    }
  }

  /// Confirm phone verification
  Future<void> confirmPhoneVerification(String phoneNumber, String code) async {
    debugPrint('📱 Confirming phone verification for: $phoneNumber');
    state = state.copyWith(isLoading: true, errorMessage: null);

    try {
      await _cognitoService.confirmPhoneVerification(phoneNumber, code);
      state = state.copyWith(
        isLoading: false,
        phoneVerified: true,
      );
      debugPrint('✅ Phone verification successful');
    } catch (e) {
      debugPrint('❌ Phone verification error: $e');
      state = state.copyWith(
        isLoading: false,
        errorMessage: 'خطأ في التحقق من رقم الهاتف: ${e.toString()}',
      );
    }
  }

  /// Resend SMS verification code
  Future<void> resendSMSCode(String phoneNumber) async {
    debugPrint('📲 Resending SMS code for: $phoneNumber');
    state = state.copyWith(isLoading: true, errorMessage: null);

    try {
      await _cognitoService.resendSMSCode(phoneNumber);
      state = state.copyWith(isLoading: false);
      debugPrint('✅ SMS code resent successfully');
    } catch (e) {
      debugPrint('❌ Resend SMS error: $e');
      state = state.copyWith(
        isLoading: false,
        errorMessage: 'خطأ في إعادة إرسال كود الرسالة النصية: ${e.toString()}',
      );
    }
  }
}

// Riverpod providers
final enhancedCognitoServiceProvider = Provider<EnhancedCognitoService>((ref) {
  return EnhancedCognitoService();
});

final cognitoAuthProvider = StateNotifierProvider<CognitoAuthNotifier, CognitoAuthState>((ref) {
  final cognitoService = ref.watch(enhancedCognitoServiceProvider);
  return CognitoAuthNotifier(cognitoService);
});

// Convenience providers
final isAuthenticatedProvider = Provider<bool>((ref) {
  return ref.watch(cognitoAuthProvider).isAuthenticated;
});

final isLoadingProvider = Provider<bool>((ref) {
  return ref.watch(cognitoAuthProvider).isLoading;
});

final authErrorProvider = Provider<String?>((ref) {
  return ref.watch(cognitoAuthProvider).errorMessage;
});

final requiresVerificationProvider = Provider<bool>((ref) {
  final state = ref.watch(cognitoAuthProvider);
  return state.requiresEmailVerification || state.requiresSMSVerification;
});

final currentUserProvider = Provider<String?>((ref) {
  return ref.watch(cognitoAuthProvider).userId;
});
